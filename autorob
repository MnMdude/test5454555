-- Services
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")

-- Color Config
local fillColor = Color3.fromRGB(0, 1, 0)      -- Green color for the health bar
local backgroundColor = Color3.new(0, 0, 0)    -- Black background for the health bar

-- Function to create an HP bar for a player
local function createHealthBar(character)
    -- Check if the player already has a health bar
    if character:FindFirstChild("HealthBarGui") then return end

    -- Create BillboardGui
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "HealthBarGui"
    billboardGui.Size = UDim2.new(5, 0, 1, 0) -- Adjust size (width and height)
    billboardGui.StudsOffset = Vector3.new(2, 3, 0) -- Position it to the side of the player
    billboardGui.Adornee = character:WaitForChild("HumanoidRootPart") -- Attach to player's root part
    billboardGui.AlwaysOnTop = true -- Ensure visibility through walls
    billboardGui.Parent = character

    -- Create background frame for the health bar
    local bgFrame = Instance.new("Frame")
    bgFrame.Size = UDim2.new(1, 0, 0.2, 0) -- Height and width of the bar background
    bgFrame.Position = UDim2.new(0, 0, 0.5, 0)
    bgFrame.BackgroundColor3 = backgroundColor -- Black background
    bgFrame.BorderSizePixel = 0
    bgFrame.Parent = billboardGui

    -- Create health bar frame
    local healthBar = Instance.new("Frame")
    healthBar.Name = "HealthBar"
    healthBar.Size = UDim2.new(1, 0, 1, 0) -- Initial full size
    healthBar.BackgroundColor3 = fillColor -- Green color
    healthBar.BorderSizePixel = 0
    healthBar.Parent = bgFrame

    -- Create a function to update health
    local function updateHealth()
        local humanoid = character:WaitForChild("Humanoid")
        local healthPercentage = humanoid.Health / humanoid.MaxHealth
        healthBar.Size = UDim2.new(healthPercentage, 0, 1, 0) -- Resize based on health percentage
    end

    -- Update the health bar when the player's health changes
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.HealthChanged:Connect(updateHealth)
    updateHealth() -- Initial update when the player spawns
end

-- Create draggable rounded GUI with minimize feature
local function createDraggableGui(player)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CustomGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = player:WaitForChild("PlayerGui")

    -- Create the main frame (draggable window)
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 300, 0, 150)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -75) -- Center of the screen
    mainFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    mainFrame.BorderSizePixel = 0
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundTransparency = 0.1
    mainFrame.Parent = screenGui

    -- Round the corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 20) -- Rounded corner radius
    corner.Parent = mainFrame

    -- Create minimize button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Text = "-"
    minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    minimizeButton.Position = UDim2.new(1, -35, 0, 5)
    minimizeButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    minimizeButton.Parent = mainFrame

    -- Round the corners of minimize button
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 10)
    buttonCorner.Parent = minimizeButton

    -- Variable to track minimized state
    local isMinimized = false
    local originalSize = mainFrame.Size

    -- Minimize/Maximize functionality
    minimizeButton.MouseButton1Click:Connect(function()
        if isMinimized then
            mainFrame.Size = originalSize
            minimizeButton.Text = "-"
        else
            mainFrame.Size = UDim2.new(0, 300, 0, 30) -- Minimize size
            minimizeButton.Text = "+"
        end
        isMinimized = not isMinimized
    end)

    -- Draggable functionality
    local dragging = false
    local dragInput, mousePos, framePos

    local function update(input)
        local delta = input.Position - mousePos
        mainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
    end

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Apply health bar and draggable GUI to all players
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        createHealthBar(character)
        createDraggableGui(player)
    end)
end)

-- For existing players
for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        createHealthBar(player.Character)
        createDraggableGui(player)
    end
end
