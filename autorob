repeat task.wait() until game:IsLoaded()

local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Player = game.Players.LocalPlayer

local flyspeed = getgenv().FlySpeed or 50  -- Default flyspeed if not set
local retryLimit = 3  -- Limit retries for server hop
local retryCount = 0

-- Function to retrieve the list of available servers
local function getServerList(cursor)
    local placeId = game.PlaceId
    local apiUrl = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Desc&limit=100"
    if cursor then apiUrl = apiUrl .. "&cursor=" .. cursor end

    local success, response = pcall(function()
        return game:HttpGet(apiUrl)
    end)

    if success then
        local decodedResponse = HttpService:JSONDecode(response)
        return decodedResponse
    else
        warn("Failed to retrieve server list: " .. response)
        return nil
    end
end

-- Server hopping function with retry logic
local function serverHop(minPlayers, maxPlayers)
    local placeId, jobId = game.PlaceId, game.JobId
    local nextCursor = nil

    repeat
        local servers = getServerList(nextCursor)
        if not servers then
            retryCount = retryCount + 1
            if retryCount >= retryLimit then
                warn("Max retries reached. Unable to hop servers.")
                return
            end
            task.wait(3)  -- Wait before retrying
        else
            for _, server in pairs(servers.data) do
                if server.playing >= minPlayers and server.playing <= maxPlayers and server.id ~= jobId then
                    local success, result = pcall(TeleportService.TeleportToPlaceInstance, TeleportService, placeId, server.id, Player)
                    if success then
                        return  -- Successful teleport, exit function
                    else
                        warn("Teleport failed: " .. result)
                    end
                end
            end
            nextCursor = servers.nextPageCursor
        end
    until not nextCursor
end

-- Function to handle small robberies
local MiniRobberies = {"Cash", "CashRegister", "DiamondBox", "Laptop", "Phone", "Luggage", "ATM", "TV", "Safe"}

local function findClosestRobbery()
    local closestRobbery, closestDistance = nil, math.huge
    local hrp = Player.Character:WaitForChild("HumanoidRootPart")

    for _, robbery in pairs(workspace.ObjectSelection:GetChildren()) do
        if table.find(MiniRobberies, robbery.Name) and not robbery:FindFirstChild("Nope") then
            local robberyPosition = robbery:GetPivot().Position
            local distance = (hrp.Position - robberyPosition).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestRobbery = robbery
            end
        end
    end
    return closestRobbery
end

local function getRobberyEvent(robbery)
    for _, descendant in pairs(robbery:GetDescendants()) do
        if descendant:IsA("RemoteEvent") then
            return descendant
        end
    end
end

-- Function for tween teleportation
local function tweenToPosition(x, y, z, speed)
    local hrp = Player.Character:WaitForChild("HumanoidRootPart")
    local destination = Vector3.new(x, y, z)
    local distance = (hrp.Position - destination).Magnitude
    local tweenInfo = TweenInfo.new(distance / speed)

    local tween = TweenService:Create(hrp, tweenInfo, {Position = destination})
    tween:Play()
    tween.Completed:Wait()  -- Wait until the tween is finished
end

-- Main robbery loop
local function robberyLoop()
    repeat
        local closestRobbery = findClosestRobbery()

        if closestRobbery then
            local robberyPos = closestRobbery:GetPivot().Position
            local robberyEvent = getRobberyEvent(closestRobbery)

            tweenToPosition(robberyPos.X, robberyPos.Y, robberyPos.Z, flyspeed)

            if robberyEvent then
                robberyEvent:FireServer()
            end
        end

        task.wait(0.05)
    until not findClosestRobbery()
end

-- Destroy unnecessary parts in the game
local function cleanGameWorld()
    local IgnoreFolder = workspace:WaitForChild("Ignore")
    IgnoreFolder:WaitForChild("ComputerStore"):WaitForChild("Lasers"):Destroy()
    IgnoreFolder:WaitForChild("JewelryStore"):WaitForChild("Jewlery"):WaitForChild("Lasers"):Destroy()

    for _, obj in pairs(IgnoreFolder.WorldObjects:GetChildren()) do
        if obj.Name == "Lasers" then
            obj:Destroy()
        end
    end
end

-- Initial setup and cleanup
task.spawn(function()
    task.wait(40)  -- Initial delay
    shop(getgenv().ServerHop.min, getgenv().ServerHop.max)
end)

task.wait(getgenv().TimeToLoad or 5)

-- Cleaning game world
cleanGameWorld()

-- Start robbery loop
robberyLoop()

-- Server hopping loop every 5 seconds
task.spawn(function()
    while true do
        task.wait(5)  -- Wait for 5 seconds before hopping
        serverHop(getgenv().ServerHop.min, getgenv().ServerHop.max)
    end
end)
