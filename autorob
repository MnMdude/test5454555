-- Wait until the game is fully loaded
repeat task.wait() until game:IsLoaded()

-- Load external script
loadstring(game:HttpGet("https://pastebin.com/raw/Dffn96Gz"))()

-- Initialize services
local TweenService = game:GetService("TweenService")
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Player = game.Players.LocalPlayer

-- Fly speed for teleportation
local flyspeed = getgenv().FlySpeed or 100

-- Function to handle server hopping
function shop(min, max)
    local playerCount = math.random(min, max)
    local _place, _id = game.PlaceId, game.JobId
    local _serversUrl = "https://games.roblox.com/v1/games/" .. _place .. "/servers/Public?sortOrder=Desc&limit=100"
    
    local function ListServers(cursor)
        local response = game:HttpGet(_serversUrl .. ((cursor and "&cursor="..cursor) or ""))
        return Http:JSONDecode(response)
    end

    local NextPage; repeat
        task.wait()
        local servers = ListServers(NextPage)
        for _, server in ipairs(servers.data) do
            if server.playing < playerCount and server.id ~= _id then
                local success = pcall(function()
                    TPS:TeleportToPlaceInstance(_place, server.id, Player)
                end)
                if success then task.wait(5) break end
            end
        end
        NextPage = servers.nextPageCursor
    until not NextPage
end

getgenv().shop = shop

-- Destroy game objects (e.g., lasers)
workspace:WaitForChild("Ignore")
workspace:WaitForChild("ComputerStore"):WaitForChild("Lasers"):Destroy()
workspace:WaitForChild("JewelryStore"):WaitForChild("Jewlery"):WaitForChild("Lasers"):Destroy()

task.wait(0.5)
for _, object in ipairs(workspace.Ignore.WorldObjects:GetChildren()) do
    if object.Name == "Lasers" then
        object:Destroy()
    end
end

-- Switch team using RemoteFunction
pcall(function()
    game:GetService("ReplicatedStorage"):WaitForChild("RemoteFunction"):InvokeServer("SetTeam", getgenv().Team)
end)

-- Server hopping logic (first hop after 40 seconds)
task.spawn(function()
    task.wait(40)
    shop(getgenv().ServerHop.min, getgenv().ServerHop.max)
end)

-- Function to tween (smooth teleport) the player to a specific location
local char = workspace:WaitForChild(Player.Name)
local hrp = char:WaitForChild("HumanoidRootPart")

local function tweenTp(x, y, z, speed)
    local pos = Vector3.new(x, y, z)
    local distance = (hrp.Position - pos).Magnitude
    local info = TweenInfo.new(distance / speed)
    local animation = TweenService:Create(hrp, info, {Position = pos})
    animation:Play()
end

-- Mini-robberies detection
local MiniRobberies = {
    "Cash", "CashRegister", "DiamondBox", "Laptop",
    "Phone", "Luggage", "ATM", "TV", "Safe"
}

-- Function to get the closest small robbery
local function get_closest_small_robbery()
    local closest_robbery = {}
    
    for _, v in ipairs(workspace.ObjectSelection:GetChildren()) do
        if not table.find(MiniRobberies, v.Name) or v:FindFirstChild("Nope") then continue end

        local modelPos = v:GetPivot().Position
        local distance = (modelPos - hrp.Position).Magnitude
        
        if #closest_robbery == 0 or distance < closest_robbery[3] then
            closest_robbery = {v, modelPos, distance}
        end
    end
    return closest_robbery
end

-- Function to get the RemoteEvent in a robbery object
local function get_event(object)
    for _, descendant in ipairs(object:GetDescendants()) do
        if descendant:IsA("RemoteEvent") then
            return descendant
        end
    end
end

-- Main loop to handle small robberies
repeat
    local closest_robbery = get_closest_small_robbery()
    
    if closest_robbery[1] then
        local robberyPos = closest_robbery[2]
        local event = get_event(closest_robbery[1])
        
        tweenTp(robberyPos.x, robberyPos.y, robberyPos.z, flyspeed)
        if event then
            pcall(function()
                event:FireServer()
            end)
        end
    end
    task.wait(0.05)
until not closest_robbery[1]

task.wait(0.2)

-- Initial server hop
shop(getgenv().ServerHop.min, getgenv().ServerHop.max)

-- Infinite loop to hop servers every 30 seconds
task.spawn(function()
    while true do
        task.wait(30)  -- Wait for 30 seconds before server hopping again
        shop(getgenv().ServerHop.min, getgenv().ServerHop.max)
    end
end)
