-- Wait until the game is fully loaded
task.wait()

local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Player = game.Players.LocalPlayer

-- Global settings
local flyspeed = getgenv().FlySpeed or 50
local minPlayers = getgenv().ServerHop and getgenv().ServerHop.min or 5
local maxPlayers = getgenv().ServerHop and getgenv().ServerHop.max or 25

-- Function to fetch server list with basic error handling
local function getServerList(cursor)
    local apiUrl = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"
    if cursor then apiUrl = apiUrl .. "&cursor=" .. cursor end
    
    local success, response = pcall(function()
        return HttpService:GetAsync(apiUrl, true)
    end)

    if success then
        local data = HttpService:JSONDecode(response)
        if data and data.data then
            return data
        end
    end

    return nil
end

-- Optimized server hop function
local function serverHop()
    local currentJobId = game.JobId
    local nextCursor = nil

    while true do
        local serverData = getServerList(nextCursor)
        if serverData and serverData.data then
            for _, server in ipairs(serverData.data) do
                -- Only hop to servers with valid player counts and skip the current server
                if server.playing >= minPlayers and server.playing < server.maxPlayers and server.id ~= currentJobId then
                    local success, result = pcall(function()
                        return TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, Player)
                    end)

                    if success then
                        print("Server hop successful: " .. server.id)
                        return
                    else
                        warn("Teleport failed: " .. tostring(result))
                    end
                end
            end
            nextCursor = serverData.nextPageCursor
            if not nextCursor then break end  -- Exit if no more servers
        else
            warn("Failed to retrieve server list or no servers available.")
            break
        end
    end
end

-- Robbery items to look for
local MiniRobberies = {"Cash", "CashRegister", "DiamondBox", "Laptop", "Phone", "Luggage", "ATM", "TV", "Safe"}

-- Function to move to a robbery object
local function moveToPosition(pos, speed)
    local hrp = Player.Character:WaitForChild("HumanoidRootPart")
    local distance = (hrp.Position - pos).Magnitude
    local tween = TweenService:Create(hrp, TweenInfo.new(distance / speed), {Position = pos})
    tween:Play()
    tween.Completed:Wait()
end

-- Optimized robbery function
local function attemptRobbery()
    local hrp = Player.Character:WaitForChild("HumanoidRootPart")
    local closest, closestDistance = nil, math.huge

    -- Find the closest robbery object
    for _, object in pairs(workspace.ObjectSelection:GetChildren()) do
        if table.find(MiniRobberies, object.Name) and object:IsDescendantOf(workspace) then
            local objPos = object:GetPivot().Position
            local distance = (hrp.Position - objPos).Magnitude
            if distance < closestDistance then
                closest = object
                closestDistance = distance
            end
        end
    end

    if closest then
        local event = closest:FindFirstChildWhichIsA("RemoteEvent", true)
        if event then
            moveToPosition(closest:GetPivot().Position, flyspeed)
            
            -- Adding a check to ensure the object and event are valid
            task.wait(0.2) -- Give slight delay after moving

            event:FireServer()  -- Trigger the robbery event
            print("Stolen from: " .. closest.Name)
        else
            warn("No RemoteEvent found for: " .. closest.Name)
        end
    else
        warn("No valid robbery object found.")
    end
end

-- Cleanup unnecessary parts from the game world
local function cleanGameWorld()
    local IgnoreFolder = workspace:FindFirstChild("Ignore")
    if IgnoreFolder then
        for _, obj in pairs(IgnoreFolder:GetDescendants()) do
            if obj.Name == "Lasers" then
                obj:Destroy()
            end
        end
    end
end

-- Initial setup
task.spawn(function()
    task.wait(30)  -- Wait 30 seconds before attempting to hop
    serverHop()
end)

task.wait(getgenv().TimeToLoad or 5)

-- Clean the game world
cleanGameWorld()

-- Robbery loop with optimized timing
task.spawn(function()
    while true do
        attemptRobbery()
        task.wait(0.5)  -- Adjusted wait to avoid excessive firing
    end
end)
